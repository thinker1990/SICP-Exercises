#lang sicp

(define (make-queue) 
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty-queue?) (null? front-ptr))
    (define (front-queue) 
      (if (empty-queue?)
          (error "FRONT called with an queue" front-ptr)
          (car front-ptr)))
    (define (insert-queue! item) 
      (let ((new-pair (cons item '())))
        (if (empty-queue?) 
            (begin (set! front-ptr new-pair)
                   (set! rear-ptr new-pair))
            (begin (set-cdr! rear-ptr new-pair)
                   (set! rear-ptr new-pair)))))
    (define (delete-queue!) 
      (if (empty-queue?)
          (error "DELETE! called with an empty queue" front-ptr)
          (set! front-ptr (cdr front-ptr))))
    (define (print-queue) 
      (begin (display front-ptr) 
             (newline)))
    (define (dispatch m) 
      (cond ((eq? m 'empty-queue?) (empty-queue?))
            ((eq? m 'front-queue) (front-queue))
            ((eq? m 'insert-queue!) insert-queue!)
            ((eq? m 'delete-queue!) (delete-queue!))
            ((eq? m 'print-queue) (print-queue))
            (else (error "Invalid operation on queue"))))
    dispatch))

(define (empty-queue? queue) (queue 'empty-queue?))
(define (front-queue queue) (queue 'front-queue))
(define (insert-queue! queue item) ((queue 'insert-queue!) item))
(define (delete-queue! queue) (queue 'delete-queue!))
(define (print-queue queue) (queue 'print-queue))


;; test cases
(define q1 (make-queue))
(print-queue q1)
;; ()
(insert-queue! q1 'a)
(print-queue q1)
;; (a)
(insert-queue! q1 'b)
(print-queue q1)
;; (a b)
(delete-queue! q1)
(print-queue q1)
;; (b)
(delete-queue! q1)
(print-queue q1)
;; ()
